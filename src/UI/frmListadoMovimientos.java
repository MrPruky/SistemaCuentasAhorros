/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package UI;

import SQL.Movimiento; // Importar la clase Movimiento (singular)
import SQL.Cuenta;     // Importar Cuenta para validar si la cuenta existe
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.DecimalFormat; // Para formatear los totales (ej. "1,234.56")

/**
 *
 * @author angel
 */
public class frmListadoMovimientos extends javax.swing.JDialog {

    // Variable para almacenar el ID de la cuenta que se está visualizando/filtrando
    private int idCuentaSeleccionada = 0;

    /**
     * Creates new form frmListadoMovimientos
     * Constructor principal, se usa cuando se abre el formulario sin un ID de cuenta predefinido.
     * El usuario deberá ingresar el ID de cuenta en el campo txtCuenta.
     */
    public frmListadoMovimientos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null); // Centrar la ventana en la pantalla
        txtDepositos.setEditable(false); // Los campos de totales son de solo lectura
        txtRetiros.setEditable(false);
        limpiarTablaYTotales(); // Limpiar la tabla y los totales al iniciar
    }
    
    /**
     * Constructor para abrir el listado de movimientos de una cuenta específica.
     * Este constructor es útil si se llama desde frmFiltradoCuentas para ver
     * los movimientos de una cuenta directamente.
     * @param parent El frame padre.
     * @param modal Si el diálogo es modal.
     * @param idCuenta El ID de la cuenta cuyos movimientos se mostrarán.
     */
    public frmListadoMovimientos(java.awt.Frame parent, boolean modal, int idCuenta) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        txtDepositos.setEditable(false);
        txtRetiros.setEditable(false);
        
        this.idCuentaSeleccionada = idCuenta;
        txtCuenta.setText(String.valueOf(idCuenta)); // Muestra el ID de la cuenta en el campo de texto
        txtCuenta.setEditable(false); // Bloquea el campo de cuenta porque ya viene predefinido
        btnBuscar.setEnabled(false); // Deshabilita el botón de buscar ya que no es necesario
        
        cargarMovimientosEnTabla(idCuenta); // Carga los movimientos de la cuenta
        calcularYMostrarTotales(idCuenta); // Calcula y muestra los totales
        
        this.setTitle("Movimientos de Cuenta ID: " + idCuenta); // Establece el título de la ventana
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * Asegúrate de que los nombres de los componentes en tu diseñador coincidan con estos.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtCuenta = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtDepositos = new javax.swing.JTextField();
        txtRetiros = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btnEditar = new javax.swing.JButton();
        // btnNuevoMovimiento = new javax.swing.JButton(); // Eliminado: No se permite crear nuevos movimientos desde este formulario

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Movimientos");

        btnEliminar.setBackground(new java.awt.Color(255, 102, 102));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jLabel2.setText("Cuenta:");

        txtCuenta.setToolTipText("Ingrese el ID de la cuenta");

        btnBuscar.setBackground(new java.awt.Color(153, 204, 255));
        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        // Configuración del modelo de la tabla para que coincida con lo que Movimiento.listadoMovimientos devuelve
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}, // 5 columnas (ID Movimiento, ID Cuenta, Tipo, Importe, Fecha)
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID Movimiento", "ID Cuenta", "Tipo", "Importe", "Fecha" 
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Double.class, java.lang.String.class
            };
            // Las celdas de la tabla de listado no son editables directamente por el usuario
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION); // Permite seleccionar solo una fila
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Total Depositos:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Total Retiros:");

        txtDepositos.setEditable(false); // De solo lectura
        txtDepositos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepositosActionPerformed(evt);
            }
        });

        txtRetiros.setEditable(false); // De solo lectura

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/wallet-solid.png"))); // NOI18N (Ajusta la ruta de tu icono si es diferente, a .png en lugar de .jpg)

        btnEditar.setBackground(new java.awt.Color(153, 204, 255));
        btnEditar.setText("Editar");
        // btnEditar.setVisible(false); // Deshabilita visualmente el botón de Editar si no se permite editar
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        // btnNuevoMovimiento fue eliminado del diseño y del código si el listado es solo para mostrar/eliminar


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
<<<<<<< Updated upstream
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnEditar)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(79, 79, 79))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminar))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnBuscar)))
                                .addGap(0, 24, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtDepositos, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtRetiros, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)))))
=======
                // Removido btnNuevoMovimiento del layout
                .addComponent(btnEditar)
>>>>>>> Stashed changes
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnEliminar)))
                .addGap(18, 18, 18)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDepositos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtRetiros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(btnEditar)) // Removido btnNuevoMovimiento del layout
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Método para cargar los movimientos en la tabla
    private void cargarMovimientosEnTabla(int idCuenta) {
        Movimiento movimientoDAO = new Movimiento(); // Usar la clase Movimiento (singular)
        DefaultTableModel modelo = movimientoDAO.listadoMovimientos(idCuenta);
        jTable1.setModel(modelo);
    }

    // Método para calcular y mostrar totales de depósitos y retiros
    private void calcularYMostrarTotales(int idCuenta) {
        Movimiento movimientoDAO = new Movimiento(); // Usar la clase Movimiento (singular)
        double totalDepositos = movimientoDAO.getTotalDepositos(idCuenta);
        double totalRetiros = movimientoDAO.getTotalRetiros(idCuenta);

        // Formato para números de moneda (ej. "1,234.56")
        DecimalFormat df = new DecimalFormat("#,##0.00"); 
        txtDepositos.setText(df.format(totalDepositos));
        txtRetiros.setText(df.format(totalRetiros));
    }

    // Método para limpiar la tabla y los campos de totales
    private void limpiarTablaYTotales() {
        // Reinicia el modelo de la tabla con las columnas correctas
        jTable1.setModel(new DefaultTableModel(new Object[][]{}, new String[]{"ID Movimiento", "ID Cuenta", "Tipo", "Importe", "Fecha"}));
        txtDepositos.setText("");
        txtRetiros.setText("");
        this.idCuentaSeleccionada = 0; // Reinicia el ID de la cuenta seleccionada
    }


    // Acción al presionar el botón Buscar
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        String idCuentaText = txtCuenta.getText().trim();
        if (idCuentaText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el ID de la cuenta para buscar sus movimientos.", "Campo Vacío", JOptionPane.WARNING_MESSAGE);
            limpiarTablaYTotales(); // Limpia si no hay ID
            return;
        }

        try {
            int idCuenta = Integer.parseInt(idCuentaText);
            // Validar si la cuenta realmente existe en la base de datos
            Cuenta cuentaValidadora = new Cuenta();
            cuentaValidadora.setIdCuenta(idCuenta);
            if (cuentaValidadora.buscar()) { // Usa el método buscar() de la clase Cuenta
                this.idCuentaSeleccionada = idCuenta; // Almacena el ID de la cuenta para usarlo en otras operaciones (eliminar, editar, nuevo)
                cargarMovimientosEnTabla(idCuenta);
                calcularYMostrarTotales(idCuenta);
            } else {
                JOptionPane.showMessageDialog(this, "La cuenta con ID " + idCuenta + " no existe.", "Cuenta No Encontrada", JOptionPane.ERROR_MESSAGE);
                limpiarTablaYTotales();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El ID de cuenta debe ser un número entero válido.", "Formato Inválido", JOptionPane.ERROR_MESSAGE);
            limpiarTablaYTotales();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error al intentar buscar movimientos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    // Acción al presionar el botón Eliminar
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int filaSeleccionada = jTable1.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un movimiento de la tabla para eliminar.", "Ningún Movimiento Seleccionado", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (idCuentaSeleccionada == 0) { // Asegúrate de que hay una cuenta cargada
            JOptionPane.showMessageDialog(this, "Primero debe buscar y seleccionar una cuenta para poder eliminar sus movimientos.", "Cuenta No Seleccionada", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Asumiendo que la columna 0 de tu tabla contiene el ID del movimiento
            // y que el modelo de la tabla es el que retorna Movimiento.listadoMovimientos
            int idMovimientoAEliminar = (Integer) jTable1.getModel().getValueAt(filaSeleccionada, 0);

            int confirmacion = JOptionPane.showConfirmDialog(this,
                    "¿Está seguro de que desea eliminar el movimiento con ID " + idMovimientoAEliminar + "?\nEsta acción es irreversible.",
                    "Confirmar Eliminación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (confirmacion == JOptionPane.YES_OPTION) {
                Movimiento movimientoAEliminar = new Movimiento();
                movimientoAEliminar.setIdMovimiento(idMovimientoAEliminar);

                if (movimientoAEliminar.eliminar()) {
                    JOptionPane.showMessageDialog(this, "Movimiento eliminado exitosamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                    // Recargar los movimientos y totales de la cuenta actual
                    cargarMovimientosEnTabla(idCuentaSeleccionada);
                    calcularYMostrarTotales(idCuentaSeleccionada);
                } else {
                    JOptionPane.showMessageDialog(this, "Error al eliminar el movimiento.", "Error de Eliminación", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (ClassCastException e) {
            JOptionPane.showMessageDialog(this, "Error al obtener el ID del movimiento. Asegúrese de que la primera columna de la tabla contiene el ID.", "Error de Tipo de Dato", JOptionPane.ERROR_MESSAGE);
            System.err.println("ClassCastException en btnEliminarActionPerformed: " + e.getMessage());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocurrió un error inesperado al intentar eliminar el movimiento: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtDepositosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepositosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepositosActionPerformed

    // Acción al presionar el botón Editar: Modificado para indicar que la edición no se permite desde aquí
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        JOptionPane.showMessageDialog(this, "La edición de movimientos no está permitida desde esta ventana de listado.", "Función No Disponible", JOptionPane.INFORMATION_MESSAGE);
        // int filaSeleccionada = jTable1.getSelectedRow();
        // if (filaSeleccionada == -1) {
        //     JOptionPane.showMessageDialog(this, "Por favor, seleccione un movimiento de la tabla para editar.", "Ningún Movimiento Seleccionado", JOptionPane.WARNING_MESSAGE);
        //     return;
        // }
        
        // if (idCuentaSeleccionada == 0) {
        //     JOptionPane.showMessageDialog(this, "Primero debe buscar y seleccionar una cuenta para poder editar sus movimientos.", "Cuenta No Seleccionada", JOptionPane.WARNING_MESSAGE);
        //     return;
        // }

        // try {
        //     int idMovimientoAEditar = (Integer) jTable1.getModel().getValueAt(filaSeleccionada, 0);

        //     Movimiento movimientoAEditar = new Movimiento();
        //     movimientoAEditar.setIdMovimiento(idMovimientoAEditar);

        //     if (movimientoAEditar.buscar()) {
        //         frmMovimiento formMovimiento = new frmMovimiento(null, true, movimientoAEditar);
        //         formMovimiento.setVisible(true);

        //         cargarMovimientosEnTabla(idCuentaSeleccionada);
        //         calcularYMostrarTotales(idCuentaSeleccionada);
        //     } else {
        //         JOptionPane.showMessageDialog(this, "No se pudo encontrar el movimiento seleccionado en la base de datos.", "Movimiento No Encontrado", JOptionPane.ERROR_MESSAGE);
        //     }
        // } catch (ClassCastException e) {
        //     JOptionPane.showMessageDialog(this, "Error al obtener el ID del movimiento. Asegúrese de que la primera columna de la tabla contiene el ID.", "Error de Tipo de Dato", JOptionPane.ERROR_MESSAGE);
        //     System.err.println("ClassCastException en btnEditarActionPerformed: " + e.getMessage());
        // } catch (Exception e) {
        //     JOptionPane.showMessageDialog(this, "Ocurrió un error inesperado al intentar editar el movimiento: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        //     e.printStackTrace();
        // }
    }//GEN-LAST:event_btnEditarActionPerformed

    // Método para registrar un nuevo movimiento: Eliminado ya que el listado es solo para mostrar/eliminar
    // private void btnNuevoMovimientoActionPerformed(java.awt.event.ActionEvent evt) {                                                 
    //     if (idCuentaSeleccionada == 0) {
    //         JOptionPane.showMessageDialog(this, "Primero debe buscar y seleccionar una cuenta para registrarle un nuevo movimiento.", "Cuenta No Seleccionada", JOptionPane.WARNING_MESSAGE);
    //         return;
    //     }
        
    //     frmMovimiento formMovimiento = new frmMovimiento(null, true, idCuentaSeleccionada);
    //     formMovimiento.setVisible(true);
        
    //     cargarMovimientosEnTabla(idCuentaSeleccionada);
    //     calcularYMostrarTotales(idCuentaSeleccionada);
    // }                                                

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmListadoMovimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmListadoMovimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmListadoMovimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmListadoMovimientos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                // Puedes usar el constructor que toma un ID de cuenta para probar
                // frmListadoMovimientos dialog = new frmListadoMovimientos(new javax.swing.JFrame(), true, 1);
                frmListadoMovimientos dialog = new frmListadoMovimientos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        // System.exit(0); // No salir de la aplicación si este es un sub-diálogo
                        dialog.dispose(); // Solo cierra esta ventana
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    // private javax.swing.JButton btnNuevoMovimiento; // Eliminado
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtCuenta;
    private javax.swing.JTextField txtDepositos;
    private javax.swing.JTextField txtRetiros;
    // End of variables declaration//GEN-END:variables
}
